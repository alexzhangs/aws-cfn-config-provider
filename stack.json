{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template to setup AWS Config services.",
  "Resources": {
    "S3BucketForConfig": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Fn::Join": ["-", [
          "config-provider", {"Fn::Select": ["2", {"Fn::Split": ["/", {"Ref": "AWS::StackId"}]}]}
        ]]}
      },
      "DeletionPolicy": "Delete"
    },
    "S3BucketPolicyForConfig": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {"Ref": "S3BucketForConfig"},
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement":[
            {
              "Sid": "AWSConfigBucketPermissionsCheck",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:GetBucketAcl",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"}
            },
            {
              "Sid": "AWSConfigBucketExistenceCheck",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:ListBucket",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"}
            },
            {
              "Sid": "AWSConfigBucketDelivery",
              "Effect": "Allow",
              "Principal": {"Service": ["config.amazonaws.com"]},
              "Action": "s3:PutObject",
              "Resource": {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}/*"},
              "Condition": {
                "StringEquals": {
                  "s3:x-amz-acl": "bucket-owner-full-control"
                }
              }
            }
          ]
        }
      }
    },
    "LambdaCleanBucketOnDeleteExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": ["lambda.amazonaws.com"]},
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"],
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "default",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket",
                    "s3:GetObject",
                    "s3:DeleteObject"
                  ],
                  "Resource": [
                    {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}"},
                    {"Fn::Sub": "arn:aws:s3:::${S3BucketForConfig}/*"}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "LambdaCleanBucketOnDelete": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Clean S3 Bucket on stack deletion.",
        "Code": { "ZipFile": { "Fn::Join": [ "\n", [
          "#!/usr/bin/env python",
          "",
          "import boto3",
          "import cfnresponse",
          "",
          "print('Loading function')",
          "",
          "def lambda_handler(event, context):",
          "    try:",
          "        bucket = event['ResourceProperties']['BucketName']",
          "        requesttype = event['RequestType']",
          "",
          "        print('request type: {}, bucket: {}'.format(requesttype, bucket))",
          "        if requesttype == 'Delete':",
          "            s3 = boto3.resource('s3')",
          "            bucket = s3.Bucket(bucket)",
          "            for obj in bucket.objects.filter():",
          "                s3.Object(bucket.name, obj.key).delete()",
          "",
          "        cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
          "    except Exception as e:",
          "        print(e)",
          "        cfnresponse.send(event, context, cfnresponse.FAILED, {'error': str(e)})"
        ] ] } },
        "Handler": "index.lambda_handler",
        "Runtime": "python3.7",
        "Timeout": "15",
        "Role": {"Fn::GetAtt": ["LambdaCleanBucketOnDeleteExecutionRole", "Arn"]}
      }
    },
    "CleanBucketOnDelete": {
      "Type": "AWS::CloudFormation::CustomResource",
      "Properties": {
        "ServiceToken": {"Fn::GetAtt": ["LambdaCleanBucketOnDelete", "Arn"]},
        "BucketName": {"Ref": "S3BucketForConfig"}
      }
    },
    "AwsServiceRoleForConfig": {
      "Type": "AWS::IAM::ServiceLinkedRole",
      "Properties": {
        "AWSServiceName": "config.amazonaws.com"
      }
    },
    "ConfigRecorder": {
      "Type": "AWS::Config::ConfigurationRecorder",
      "Properties": {
        "Name": "aws-cfn-config-provider",
        "RecordingGroup": {
          "AllSupported": {"Ref": "AllSupported"},
          "IncludeGlobalResourceTypes": {"Ref": "IncludeGlobalResourceTypes"},
          "ResourceTypes": {"Fn::If": [
            "ResourceTypesIsNull",
            {"Ref": "AWS::NoValue"},
            {"Fn::Split": [",", {"Ref": "ResourceTypes"}]}
          ]}
        },
        "RoleARN": {"Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/config.amazonaws.com/${AwsServiceRoleForConfig}"}
      }
    },
    "ConfigDeliveryChannel": {
      "Type": "AWS::Config::DeliveryChannel",
      "Properties": {
        "S3BucketName": {"Ref": "S3BucketForConfig"},
        "SnsTopicARN": {"Fn::If": [
          "SnsTopicArnIsNull",
          {"Ref": "AWS::NoValue"},
          {"Ref": "SnsTopicArn"}
        ]}
      },
      "DependsOn": [
        "CleanBucketOnDelete"
      ]
    }
  },
  "Conditions": {
    "ResourceTypesIsNull": {
      "Fn::Equals": ["", {"Ref": "ResourceTypes"}]
    },
    "SnsTopicArnIsNull": {
      "Fn::Equals": ["", {"Ref": "SnsTopicArn"}]
    }
  },
  "Parameters": {
    "AllSupported": {
      "Type": "String",
      "Default": "true",
      "Description": "Specifies whether AWS Config records configuration changes for every supported type of regional resource. If you set this option to true, you cannot enumerate a list of ResourceTypes. Default is 'true'."
    },
    "IncludeGlobalResourceTypes": {
      "Type": "String",
      "Default": "true",
      "Description": "Specifies whether AWS Config includes all supported types of global resources (for example, IAM resources) with the resources that it records. Before you can set this option to true, you must set the AllSupported option to true. Default is 'true'."
    },
    "ResourceTypes": {
      "Type": "String",
      "Default": "",
      "Description": "A comma-separated list that specifies the types of AWS resources for which AWS Config records configuration changes (for example, 'AWS::EC2::Instance,AWS::EC2::Volume'). Before you can set this option to true, you must set the AllSupported option to false."
    },
    "SnsTopicArn": {
      "Type": "String",
      "Default": "",
      "Description": "The Amazon Resource Name (ARN) of the Amazon SNS topic to which AWS Config sends notifications about configuration changes."
    }
  },
  "Outputs": {
    "S3Bucket": {
      "Value": {"Ref": "S3BucketForConfig"}
    },
    "LambdaArn": {
      "Value": {"Fn::GetAtt": ["LambdaCleanBucketOnDelete", "Arn"]}
    },
    "ConfigRecorder": {
      "Value": {"Ref": "ConfigRecorder"}
    },
    "ConfigDeliveryChannel": {
      "Value": {"Ref": "ConfigDeliveryChannel"}
    }
  }
}
